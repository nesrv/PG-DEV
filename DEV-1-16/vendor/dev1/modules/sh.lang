
Description="Bash"

Identifiers=[[ [a-zA-Z_][\w\-]* ]]

Keywords={
  { Id=1,
    List={"case", "in", "esac", "for", "do", "done", "function", "if", "then",
"fi", "elif", "else", "select", "time", "until", "while",
"source", "alias", "bind", "break", "builtin", --"command",
"continue",
--"declare",
"dirs", "disown", "enable", "export", "fc", "fg", "getopts",
"hash", 
-- "help", 
"history", "jobs",  "let", 
--"local", 
"logout", "popd", "printf",
"pushd", "pwd", "read", "readonly", "return", "set",  "shift", "shopt",
"suspend", "test", "times", "trap", "type", "ulimit", "umask", "unalias",
"unset", "wait", "eval", "bg", "cd", "echo", "exec", "exit", "kill",
--
"ls", "cat", "tac", "rev", "cp", "mv", "rm", "rmdir", "chmod", "chown",
"chattr", "ln", "find", "xargs", "expr", "date", "zdump", "time", "touch", "at",
"batch", "cal", "sleep", "usleep", "hwclock", "clock", "sort", "tsort", "diff",
"patch", "diff3", "sdiff", "cmp", "comm", "uniq", "expand", "unexpand", "cat",
"paste", "join", "head", "tail", "grep", "egrep", "zgrep", "look", "sed", "awk",
"wc", "tr", "fold", "fmt", "ptx", "col", "column", "colrm", "nl", "pr",
"gettext", "iconv", "recode", "groff", "lex", "yacc", "tar", "shar", "ar",
"cpio", "gzip", "bzip2", "compress", "uncompress", "zip", "unzip", "sq", "file","base32",
"which", "whereis", "whatis", "vdir", "shred", "locate", "slocate", "strings",
"basename", "dirname", "split", "sum", "cksum", "md5sum", "sha1sum", "uuencode",
"uudecode", "crypt", "make", 
--"install", 
"more", "less", "host", "vrfy",
"nslookup", "dig", "traceroute", "ping", "whois", "finger", "ftp", "uucp",
"telnet", "rlogin", "rsh", "rcp", "ssh", "write", "mail", "vacation", "tput",
"reset", "clear", "script", "factor", "bc", "dc", "jot", "seq", "yes", "banner",
"printenv", "lp", "tee", "mkfifo", "pathchk", "dd", "od", "hexdump", "m4",
"man", "mkdir", "ps", "zcat", 
"configure", "tree", "locale",
"apt", "apt-get",
--
"systemctl"
    },
  },
  { Id=2,
    List={"su", "sudo",
    },
  },
  { Id=3,
    List={
"pg_archivecleanup", "pg_config", "pg_dropcluster", "pg_lsclusters", "pg_renamecluster", "pg_upgradecluster",
"pg_backupcluster", "pg_conftool", "pg_dump", "pg_receivewal", "pg_restore", "pg_virtualenv",
"pg_basebackup", "pg_createcluster", "pg_dumpall", "pg_receivexlog", "pg_restorecluster",
"pg_buildext", "pg_ctlcluster", "pg_isready", "pg_recvlogical", "pg_updatedicts",
"pg_ctl", "psql", "pgbench", "pg_checksums",
"initdb", "oid2name", "pg_upgrade", "pg_waldump",
"pg_controldata", "pg_rewind", "pg_verifybackup", "vacuumlo",
-- enterprise
"pg-setup","pg-wrapper"
    },
  },
  --{ Id=3,
  --  Regex=[[(\w+)\s*\(]]
  --},
  { Id=3,
    Regex=[[\$\{.+?\}]],
  },
  { Id=3,
    Regex=[[ \$[\w\#]+ ]],
  },
  -- do not highlight the following
  -- number
  { Id=99,
    Regex=[[[0-9]+]],
  },
}

-- hereDoc opening delimiter, see OnStateChange to handle end of string
Strings={
  Delimiter=[["|'|`|<<[\-"']?\s*[-\w_]+["']?]],
}

IgnoreCase=false

Comments={
  { Block=false,
    Delimiter= { [[#]] },
  },
}

Operators=[[\(|\)|\[|\]|\{|\}|\,|\;|\:|\&|<|>|\!|\=|\/|\*|\%|\+|\-]]

function OnStateChange(oldState, newState, token)

   if  (string.sub(token,1,1) =="$" )  and oldState==HL_STRING and newState==HL_KEYWORD then
      return HL_INTERPOLATION
   end

   --recognize hereDoc multine strings
   if oldState==HL_STANDARD and newState==HL_STRING and not string.find("\"'`", token) then
      hereDoc = string.match(token, "<<%-?'?%s*([%-%a%d_]+)" )
   end
   if oldState==HL_STRING and token==hereDoc then
      hereDoc = nil
      return HL_STRING_END
   end
   
   return newState
end

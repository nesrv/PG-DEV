#!/bin/bash

. ../lib
init

start_here
###############################################################################
h '1. Базы данных и таблица'

c 'Сначала установим уровень журнала logical.'
s 1 "\c - postgres"
s 1 "ALTER SYSTEM SET wal_level = logical;"
pgctl_restart A

c 'Базы данных:'

psql_open A 1
s 1 "CREATE DATABASE replica_logical_1;"
s 1 "CREATE DATABASE replica_logical_2;"

c 'Таблица в первой базе:'

s 1 '\c replica_logical_1'
s 1 'CREATE TABLE test(id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, descr text);'
s 1 "INSERT INTO test(descr) VALUES ('Раз'), ('Два'), ('Три');"

###############################################################################
h '2. Перенос таблицы во вторую БД'

c 'Воспользоваться логической резервной копией особенно удобно, когда таблиц много.'

e 'pg_dump --schema-only replica_logical_1 | psql -d replica_logical_2'

c 'Переносить данные с помощью pg_dump не имеет смысла, поскольку в процессе переноса таблицы могут измениться.'

psql_open B 2 -d replica_logical_2
export PSQL_PROMPT2=$PSQL_PROMPT1
s 2 '\d test;'

###############################################################################
h '3. Логическая репликация'

c 'Публикация:'

s 1 'CREATE PUBLICATION test_pub FOR TABLE test;'

c 'Поскольку репликация будет настроена на одном и том же сервере, вначале вручную создаем слот логической репликации.'

s 1 "SELECT pg_create_logical_replication_slot('testslot','pgoutput');"

c 'И затем создаем подписку:'

s 2 '\c - postgres'
s 2 "CREATE SUBSCRIPTION test_sub
CONNECTION 'user=student dbname=replica_logical_1'
PUBLICATION test_pub
WITH (create_slot = false, slot_name = testslot);
"

###############################################################################
h '4. Проверка'

s 1 "INSERT INTO test(descr) VALUES ('Четыре');"

wait_sql 2 "SELECT count(*)=4 FROM test;"
s 2 'SELECT * FROM test;'

###############################################################################
h '5. Удаление подписки'

s 2 'DROP SUBSCRIPTION test_sub;'

###############################################################################
stop_here
cleanup
demo_end

#!/bin/bash

. ../lib

init

start_here ...

###############################################################################
h '1. Индекс для событий'

s 1 "CREATE DATABASE $TOPIC_DB;"
s 1 "\c $TOPIC_DB"

c 'Создадим таблицу и заполним ее случайными данными:'

s 1 "CREATE TABLE events(
    date_happen timestamptz
);"
s 1 "INSERT INTO events(date_happen)
    -- события за 10 лет
    SELECT now() - 10*365*24*60*60 * random() * interval '1 sec'
    FROM generate_series(1,10_000);"

c 'Поиск наиболее близких дат — задача поиска ближайших соседей. Метод доступа btree не поддерживает (пока) поиск ближайших соседей, поэтому придется воспользоваться методом gist (и расширением btree_gist, добавляющим, в том числе, класс операторов для дат).'

s 1 "CREATE EXTENSION btree_gist;"

c 'Ускорить необходимые нам запросы поможет GiST-индекс:'

s 1 "CREATE INDEX ON events USING gist(date_happen);"

c 'Вот как может выглядеть запрос:'

s 1 "SELECT date_happen, date_happen <-> now() - interval '3 years' delta
FROM events
ORDER BY date_happen <-> now() - interval '3 years'
LIMIT 10;"

c 'Его план выполнения использует созданный индекс:'

s 1 "EXPLAIN (costs off)
SELECT *
FROM events
ORDER BY date_happen <-> now() - interval '3 years'
LIMIT 10;"

###############################################################################
h '2. Расширение pg_trgm'

c 'Установим расширение:'

s 1 "CREATE EXTENSION pg_trgm;"

c 'Посмотрим, как с его помощью ускоряется поиск по условию LIKE, на примере таблицы с архивом почтовой рассылки.'

e "zcat ~/mail_messages.sql.gz | psql -d $TOPIC_DB"

s 1 '\timing on'
s 1 "SELECT count(*) FROM mail_messages WHERE subject ILIKE '%magic%';"
s 1 '\timing off'

c 'Создадим индекс:'

s 1 "CREATE INDEX ON mail_messages USING gist(subject gist_trgm_ops);"

s 1 "EXPLAIN (costs off)
SELECT count(*) FROM mail_messages WHERE subject ILIKE '%magic%';"

s 1 '\timing on'
s 1 "SELECT count(*) FROM mail_messages WHERE subject ILIKE '%magic%';"
s 1 '\timing off'

p

c 'Операторы для класса операторов gist_trgm_ops:'

s 1 '\dAo gist gist_trgm_ops'

ul 'Операторы ~~ и ~~* эквивалентны LIKE и ILIKE;'
ul 'Операторы ~ и ~* проверяют соответствие регулярному выражению (с учетом и без учета регистра).'
c 'Значение остальных операторов описано на странице документации расширения pg_trgm.'

p

c 'Класс операторов для триграмм использует так называемое сигнатурное дерево. Триграммы заменяются на сигнатуры, то есть двоичные числа, в которых все биты нулевые, и лишь один определенный бит установлен в единицу. И вся строка заменяется на сигнатуру, которая вычисляется как побитовое ИЛИ сигнатур составляющих ее триграмм. Таким образом, вместо строки в индексе сохраняется одно число.'

c 'Общим предикатом в сигнатурном дереве является побитовое ИЛИ всех сигнатур, которые находятся ниже в поддереве.'

c 'Замена индексируемых элементов битовой сигнатурой позволяет индексировать с помощью GiST вообще все, что угодно (например, изображения). Но, к сожалению, это не слишком эффективный метод. Во-первых, число бит в сигнатуре ограничено, и поэтому некоторые разные элементы будут иметь одинаковую сигнатуру. Во-вторых, чем выше узел стоит в дереве, тем больше в его сигнатуре будет единиц. Это означает, что при поиске придется спускаться в лишние поддеревья и необходимо все время перепроверять полученные результаты.'

c 'В теме «Слабоструктурированные данные» будет показан другой, более эффективный (но менее универсальный) метод доступа — GIN.'

###############################################################################

stop_here
cleanup

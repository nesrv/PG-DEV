#!/bin/bash

. ../lib
init

psql_open A 2

start_here

###############################################################################
h '1. Фантомное чтение на уровне Read Committed'

s 1 "CREATE DATABASE $TOPIC_DB;"
s 1 "\c $TOPIC_DB"

c 'Пустая таблица:'

s 1 'CREATE TABLE foo(id integer);'

c 'Во втором сеансе начнем транзакцию Read Committed и выполним запрос.'

s 2 "\c $TOPIC_DB"
s 2 "BEGIN;"
s 2 'SELECT * FROM foo;'

c 'Вставим новую строку в таблицу (изменения фиксируются).'

s 1 "INSERT INTO foo VALUES (1);"

s 2 'SELECT * FROM foo;'

c 'Транзакция Read Committed видит добавленную строку.'
c 'Отличие от аномалии неповторяющегося чтения (при которой транзакция видит зафиксированные изменения в уже существовавших строках) состоит в том, что здесь видны строки, которых не было раньше.'

s 2 "COMMIT;"

###############################################################################
h '2. Транзакционность DDL'

c 'Откроем транзакцию, удалим таблицу foo, после чего транзакцию откатим.'
s 1 'BEGIN;'
s 1 'DROP TABLE foo;'
s 1 'ROLLBACK;'

c 'Таблица по-прежнему существует:'
s 1 'SELECT * FROM foo;'

###############################################################################
h '3. Момент, на который видны данные'

c 'Открываем транзакцию Repeatable Read:'
s 1 'BEGIN ISOLATION LEVEL REPEATABLE READ;'

c 'В другом сеансе удаляем строку (изменение фиксируется):'
s 2 'DELETE FROM foo;'

c 'Проверяем содержимое таблицы в открытой транзакции:'
s 1 'SELECT * FROM foo;'

c 'Почему строка не видна? Дело в том, что в транзакции Repeatable Read (и Serializable) данные видны на момент начала первой команды, а не на момент выполнения оператора BEGIN.'

c 'Завершим транзакцию, вернем строчку и повторим эксперимент.'
s 1 'COMMIT;'
s 1 "INSERT INTO foo VALUES (1);"

c 'Еще раз начнем транзакцию Repeatable Read и выполним в ней запрос, который не обращается к таблицам.'
s 1 'BEGIN ISOLATION LEVEL REPEATABLE READ;'
s 1 'SELECT 2*2;'

c 'В другом сеансе удалим строку.'
s 2 'DELETE FROM foo;'

c 'На этот раз строка в первом сеансе видна:'
s 1 'SELECT * FROM foo;'

c 'Таким образом, даже команда, не обращающаяся к таблицам, определяет момент, на который видны данные.'

s 1 'COMMIT;'

###############################################################################

stop_here
cleanup
